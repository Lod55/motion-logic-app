{"version":3,"sources":["utils/parser.js","api/api.js","components/NavBar/NavBar.jsx","components/FormSearch/FormSearch.jsx","components/CitiesList/CitiesList.jsx","components/pages/SearchPage.jsx","components/pages/AboutPage.jsx","components/SearchByColumns/SearchByColumns.jsx","components/Table/colums.js","components/Table/Table.jsx","components/pages/TablePage.jsx","App.jsx","utils/search.js","reportWebVitals.js","index.js"],"names":["data","MockAdapter","axios","onGet","reply","cities","map","city","index","id","isSave","district","name","population","subject","NavBar","className","to","activeClassName","FormSearch","onChange","setIsSearch","addFullList","useState","value","setValue","isFullList","setIsFulllist","type","placeholder","e","keyword","target","length","htmlFor","onClick","CitiesList","onSave","isSearch","classes","push","join","checked","bind","SearchPage","searchValue","AboutPage","href","SearchByColumns","column","filterValue","setFilter","COLUMS","Header","accessor","Filter","Table","onRemove","columns","useMemo","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","values","cells","cell","getCellProps","TablePage","props","App","setCities","setSearchValue","citiesSave","setCitiesSave","isFirstLoading","setIsFirstLoading","getCitiesData","a","get","console","log","useEffect","localStorage","setItem","JSON","stringify","filter","currentCities","parse","getItem","path","exact","prev","lowerCaseKeyword","toLowerCase","item","includes","sort","b","searchByName","window","confirm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.36f43036.chunk.js","sourcesContent":["export const parserDataCity = (data) => {\n  if (!data) return null;\n\n  return data.map((city, index) => {\n    const newData = {\n      id: index + 1,\n      isSave: false,\n      district: city.district,\n      name: city.name,\n      population: city.population,\n      subject: city.subject,\n    };\n\n    return newData;\n  });\n};\n","import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport cities from './russian-cities.json';\nimport { parserDataCity } from '../utils/parser';\n\nconst mock = new MockAdapter(axios);\n\nmock.onGet('/cities').reply(200, {\n  cities: parserDataCity(cities),\n});\n\nexport const getData = () => axios.get('/cities');\n","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\n\nconst NavBar = () => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper  teal darken-2\">\n        <Link to=\"/\" className=\"brand-logo center\">\n          Поиск городов\n        </Link>\n        <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\n          <li>\n            <NavLink activeClassName=\"menu-item_active\" to=\"/about\">\n              Информация\n            </NavLink>\n          </li>\n          <li>\n            <NavLink activeClassName=\"menu-item_active\" to=\"/search\">\n              Поиск\n            </NavLink>\n          </li>\n          <li>\n            <NavLink activeClassName=\"menu-item_active\" to=\"/table\">\n              Таблица\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport './FormSearch.css';\n\nconst FormSearch = ({ onChange, setIsSearch, addFullList, cities }) => {\n  const [value, setValue] = useState('');\n  const [isFullList, setIsFulllist] = useState(false);\n\n  const handleChange = (e) => {\n    const keyword = e.target.value;\n    keyword.length > 3 ? setIsSearch(true) : setIsSearch(false);\n\n    setValue(keyword);\n    onChange(keyword);\n  };\n\n  const clickHandler = () => {\n    onChange('');\n    setValue('');\n    setIsFulllist(false);\n  };\n\n  const clickHandlerFullList = () => {\n    setIsFulllist(true);\n    setIsSearch(false);\n    addFullList();\n  };\n\n  return (\n    <div className=\"input-field mt2\">\n      <input\n        type=\"text\"\n        id=\"search\"\n        placeholder=\"Введите название города\"\n        value={value}\n        onChange={handleChange}\n      />\n      <label htmlFor=\"search\" className=\"active\">\n        Поиск\n      </label>\n      <div>\n        <button\n          type=\"reset\"\n          className={`waves-effect waves-light btn ${\n            !isFullList && cities.length === 0 && 'disabled'\n          }`}\n          onClick={clickHandler}\n        >\n          Сбросить\n        </button>\n        <p>{`Кол-во городов: ${cities.length}`}</p>\n        <button\n          type=\"button\"\n          className={`waves-effect waves-light btn ${isFullList && 'disabled'}`}\n          onClick={clickHandlerFullList}\n        >\n          Весь список\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FormSearch;\n","import React from 'react';\n\nconst CitiesList = ({ cities, onSave, isSearch }) => {\n  if (isSearch && cities?.length === 0) {\n    return (\n      <p className=\"center\">\n        По вашему запрому ничего не найдено, введите другое значение в поисковую\n        строку\n      </p>\n    );\n  }\n  return (\n    <ul className=\"cities\">\n      {cities?.map((city) => {\n        const classes = ['city'];\n\n        if (city.isSave) {\n          classes.push('saved', 'disabled');\n        }\n\n        return (\n          <li className={classes.join(' ')} key={city.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={city.isSave}\n                onChange={onSave.bind(null, city.id)}\n              />\n              <span>{city.name}</span>\n            </label>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default CitiesList;\n","import React, { useState } from 'react';\nimport FormSearch from '../FormSearch/FormSearch';\nimport CitiesList from '../CitiesList/CitiesList';\n\nconst SearchPage = ({ searchValue, onChange, onSave, addFullList }) => {\n  const [isSearch, setIsSearch] = useState(false);\n\n  const handleChange = (keyword) => {\n    onChange(keyword);\n  };\n\n  const saveHandler = (id) => {\n    onSave(id);\n  };\n\n  return (\n    <>\n      <FormSearch\n        onChange={handleChange}\n        setIsSearch={setIsSearch}\n        addFullList={addFullList}\n        cities={searchValue}\n      />\n      <CitiesList\n        cities={searchValue}\n        onSave={saveHandler}\n        isSearch={isSearch}\n      />\n    </>\n  );\n};\n\nexport default SearchPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst AboutPage = () => {\n  return (\n    <>\n      <h2 className=\"center\">Функциональность проекта</h2>\n      <br />\n      <ul className=\"collection with-header center\">\n        <li className=\"collection-header\">\n          <h3>Общие подходы</h3>  \n        </li>\n        <li className=\"collection-item\">\n          В качестве симуляции API использован Mock-adapter\n        </li>\n        <li className=\"collection-item\">\n          Список городов взят из публичного репозитория на Gh{' '}\n          <a href=\"https://github.com/pensnarik/russian-cities\">перейти</a>\n        </li>\n        <li className=\"collection-item\">\n          При обновлении страницы браузера актуальный список город берется из\n          localStorage\n        </li>\n        <li className=\"collection-header\">\n          <h3>Поиск</h3>  \n        </li>\n        <li className=\"collection-item\">\n          Динамический поиск по введенному запросу начиная от 3х символов\n        </li>\n        <li className=\"collection-item\">Вывод количетва результатов поиска</li>\n        <li className=\"collection-item\">Кнопка сброса поисковой выдачи</li>\n        <li className=\"collection-item\">\n          Кнопка вывода всех доступных городов\n        </li>\n        <li className=\"collection-item\">\n          При отсуствии результатов поиска вывод соотвествующего сообщения\n        </li>\n        <li className=\"collection-item\">\n          Возможность сохранить город нажатием на элемент поисковой выдачи\n        </li>\n        <li className=\"collection-header\">\n          <h3>Таблица</h3>  \n        </li>\n        <li className=\"collection-item\">\n          При отсувтсвии сохраненных городов вывод соответсвующего сообщения\n        </li>\n        <li className=\"collection-item\">\n          Реализована сортировка данных таблицы по столбцам при нажатии на\n          заголовок в шапке таблицы\n        </li>\n        <li className=\"collection-item\">Реализован поиск по солбцам таблицы</li>\n        <li className=\"collection-item\">\n          Реализована возможность удаления нажатием на соотвествующий элемент с\n          подтверждением\n        </li>\n      </ul>\n\n      <Link to=\"/search\" className=\"waves-effect waves-light btn mb100\">\n        <i className=\"material-icons left\">search</i>Перейти к поиску\n      </Link>\n    </>\n  );\n};\n\nexport default AboutPage;\n","import React from 'react';\n\nconst SearchByColumns = ({ column }) => {\n  const { filterValue, setFilter } = column;\n  return (\n    <input\n      placeholder=\"Поиск\"\n      type=\"text\"\n      value={filterValue || ''}\n      onChange={(e) => setFilter(e.target.value)}\n    />\n  );\n};\n\nexport default SearchByColumns;\n","import SearchByColumns from '../SearchByColumns/SearchByColumns';\n\nexport const COLUMS = [\n  {\n    Header: 'id',\n    accessor: 'id',\n    Filter: SearchByColumns,\n  },\n  {\n    Header: 'Название города',\n    accessor: 'name',\n    Filter: SearchByColumns,\n  },\n  {\n    Header: 'Население',\n    accessor: 'population',\n    Filter: SearchByColumns,\n  },\n  {\n    Header: 'Область',\n    accessor: 'subject',\n    Filter: SearchByColumns,\n  },\n  {\n    Header: 'Район',\n    accessor: 'district',\n    Filter: SearchByColumns,\n  },\n];\n","import './Table.css';\nimport React, { useMemo } from 'react';\nimport { useSortBy, useTable, useFilters } from 'react-table';\nimport { COLUMS } from './colums';\n\nconst Table = ({ cities, onRemove }) => {\n  const columns = useMemo(() => COLUMS, []);\n  const data = useMemo(() => cities || [], [cities]);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n      },\n      useFilters,\n      useSortBy\n    );\n\n  if (cities.length === 0)\n    return (\n      <p className=\"center\">\n        Таблица на данный момент пуста, сохрание элементы на странице поиска.\n      </p>\n    );\n\n  return (\n    <table {...getTableProps()} className=\"responsive-table\">\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <>\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  <span>\n                    {' '}\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <i className=\"material-icons tiny\">keyboard_arrow_up</i>\n                      ) : (\n                        <i className=\"material-icons tiny\">\n                          keyboard_arrow_down\n                        </i>\n                      )\n                    ) : (\n                      ' '\n                    )}\n                  </span>\n                </th>\n              ))}\n            </tr>\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th>{column.canFilter ? column.render('Filter') : null}</th>\n              ))}\n            </tr>\n          </>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()} onClick={() => onRemove(row.values.id)}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from 'react';\n\nimport Table from '../Table/Table';\n\nconst TablePage = (props) => {\n  return <Table {...props} />;\n};\n\nexport default TablePage;\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport { getData } from './api/api';\nimport { searchByName } from './utils/search';\n\nimport NavBar from './components/NavBar/NavBar';\nimport SearchPage from './components/pages/SearchPage';\nimport AboutPage from './components/pages/AboutPage';\nimport TablePage from './components/pages/TablePage';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  const [searchValue, setSearchValue] = useState([]);\n  const [citiesSave, setCitiesSave] = useState([]);\n\n  const [isFirstLoading, setIsFirstLoading] = useState(true);\n\n  const handleChange = (keyword) => {\n    if (keyword.length < 3) return setSearchValue([]);\n    setSearchValue(searchByName(cities, keyword));\n  };\n\n  const saveHandler = (id) => {\n    setSearchValue((prev) =>\n      prev.map((city) =>\n        city.id === id && !city.isSave ? { ...city, isSave: true } : city\n      )\n    );\n\n    setCities((prev) =>\n      prev.map((city) =>\n        city.id === id && !city.isSave ? { ...city, isSave: true } : city\n      )\n    );\n  };\n\n  const removeHandler = (id) => {\n    const shoudRemove = window.confirm(\n      'Вы уверены, что хотите удалить элемент?'\n    );\n    if (shoudRemove) {\n      setCities((prev) =>\n        prev.map((city) => (city.id === id ? { ...city, isSave: false } : city))\n      );\n    }\n  };\n\n  const addFullList = () => {\n    setSearchValue(cities);\n  };\n\n  const getCitiesData = async () => {\n    try {\n      const { data } = await getData();\n      setCities(data.cities);\n    } catch {\n      console.log('Запрос городов произошел с ошибкой!');\n    }\n  };\n\n  useEffect(() => {\n    if (isFirstLoading) return;\n    localStorage.setItem('cities', JSON.stringify(cities));\n    setCitiesSave(cities.filter((city) => city.isSave));\n  }, [cities, isFirstLoading]);\n\n  useEffect(() => {\n    const currentCities = JSON.parse(localStorage.getItem('cities'));\n\n    setIsFirstLoading(false);\n    if (!currentCities) getCitiesData();\n\n    if (currentCities) {\n      setCitiesSave(currentCities.filter((city) => city.isSave));\n      setCities(currentCities);\n    }\n  }, []);\n\n  return (\n    <>\n      <NavBar />\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/about\" exact>\n            <AboutPage />\n          </Route>\n\n          <Route path=\"/search\" exact>\n            <SearchPage\n              onSave={saveHandler}\n              searchValue={searchValue}\n              onChange={handleChange}\n              addFullList={addFullList}\n            />\n          </Route>\n\n          <Route path=\"/table\" exact>\n            <TablePage cities={citiesSave} onRemove={removeHandler} />\n          </Route>\n\n          <Route path=\"*\">\n            <Redirect to=\"/about\" />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","export const searchByName = (data, keyword) => {\n  const lowerCaseKeyword = keyword.toLowerCase();\n\n  const seachedCities = data.filter((item) =>\n    item.name.toLowerCase().includes(lowerCaseKeyword)\n  );\n\n  return seachedCities.sort((a, b) => {\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n  });\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}